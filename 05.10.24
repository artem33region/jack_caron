from playwright.sync_api import sync_playwright

def test_purchase():
  with sync_playwright() as p:
    browser = p.chromium.launch(headless=False)
    page = browser.new_page()

    page.goto("https://www.saucedemo.com/")

    page.fill("#user-name", "standard_user")
    page.fill("#password", "secret_sauce")
    page.click("#login-button")

    page.click('//div[@class="inventory_item"]//button[text()="Add to cart"]')
    page.click('//a[@class="shopping_cart_link"]')
    assert page.text_content('//div[@class="inventory_item_name"]') == "Sauce Labs Backpack"

    page.click('//button[@id="checkout"]')
    page.fill("#firstName", "Иван")
    page.fill("#lastName", "Иванов")
    page.fill("#postalCode", "12345")
    page.click('//button[@id="continue"]')

    assert page.text_content('//div[@class="summary_info_label"]') == "Sauce Labs Backpack"
 page.click('//button[@id="finish"]')

    assert page.text_content('//h2[@class="complete-header"]') == "THANK YOU FOR YOUR ORDER"

    browser.close()

if __name__ == "__main__":
  test_purchase()






import requests
import os
from dotenv import load_dotenv

load_dotenv()

GITHUB_USER = os.getenv('GITHUB_USER')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
REPO_NAME = os.getenv('REPO_NAME')

# Базовый URL GitHub API
BASE_URL = "https://api.github.com"

def create_repo():
  headers = {"Authorization": f"token {GITHUB_TOKEN}"}
  data = {"name": REPO_NAME, "private": False}
  response = requests.post(f"{BASE_URL}/user/repos", headers=headers, json=data)
  if response.status_code == 201:
    print(f"Репозиторий {REPO_NAME} создан.")
  else:
    print(f"Ошибка создания репозитория: {response.text}")

def check_repo():
  headers = {"Authorization": f"token {GITHUB_TOKEN}"}
  response = requests.get(f"{BASE_URL}/users/{GITHUB_USER}/repos", headers=headers)
  if response.status_code == 200:
    repos = response.json()
    if any(repo["name"] == REPO_NAME for repo in repos):
      print(f"Репозиторий {REPO_NAME} найден.")
    else:
      print(f"Репозиторий {REPO_NAME} не найден.")
  else:
    print(f"Ошибка получения списка репозиториев: {response.text}")

def delete_repo():
  headers = {"Authorization": f"token {GITHUB_TOKEN}"}
  response = requests.delete(f"{BASE_URL}/repos/{GITHUB_USER}/{REPO_NAME}", headers=headers)
  if response.status_code == 204:
    print(f"Репозиторий {REPO_NAME} удален.")
  else:
    print(f"Ошибка удаления репозитория: {response.text}")

if __name__ == "__main__":
  create_repo()
  check_repo()
  delete_repo()
